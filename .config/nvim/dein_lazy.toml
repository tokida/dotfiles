# 遅延読み込み用
# 
#  on_i 1を指定すると、インサートモードに入った時に読み込まれます
#  on_ft 指定したファイルタイプの時に読み込まれます
#  on_path バッファ名が一致した時に読み込まれます。.*を指定すると何かのファイルを開いた時に読み込まれるので、filerなどのプラグインで使うと便利です
#  on_source 記載されたプラグインが読み込まれた後に読み込まれます
#  on_cmd コマンドが実行された時に読み込まれます。['Unite', 'UniteResume']のようなプラグインのコマンドを指定するかと思います
#  on_map on_cmdのマッピング版で['<Plug>(neosnippet_expand_or_jump)']のように指定します
#  depends プラグイン間で依存性がある場合に使います。ここに記述しても自動的にインストールされるわけじゃない点はneobundle.vimとは少し挙動が違うので要注意の人もいるかもしれません
#  if 'has("nvim") などのように書いて条件に一致した場合のみ読み込まれます
# :help dein-options


[[plugins]]
repo = 'Yggdroot/indentLine'
on_ft = ['python','json','markdown','toml','vim']
hook_add = '''
	let g:indentLine_char = '┆'
'''


[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
		nmap <silent> <C-k> <Plug>(ale_previous_wrap) 	"エラー個所への移動
		nmap <silent> <C-j> <Plug>(ale_next_wrap)

		let g:ale_sign_column_always = 1				"左端のシンボルカラムを表示したままにする

		" エラー行に表示するマーク
		let g:ale_sign_error = ''
		let g:ale_sign_warning = ''

		" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
		let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

		" エラー表示の列を常時表示
		let g:ale_sign_column_always = 1

		" ロケーションリストの代わりにQuickFixを使用する
		let g:ale_set_loclist = 0
		let g:ale_set_quickfix = 1

		" エラーと警告の一覧を見るためにウィンドウを開いておく
		let g:ale_open_list = 1
		let g:ale_keep_list_window_open = 0

		" Set this in your vimrc file to disabling highlighting
		let g:ale_set_highlights = 0

		let g:ale_linters = {
			\ 'markdown': ['textlint'],
			\ 'python': ['pylint'],
			\ }
		let g:ale_fixers = {
			\ 'python': ['autopep8', 'black','isort']
			\}
'''
on_ft = ['python', 'javascript', 'markdown']



# Gitの変更箇所にマークを付ける
# https://github.com/airblade/vim-gitgutter
[[plugins]]
repo = 'airblade/vim-gitgutter'

# Git plugin 管理ツール
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
		" 分割画面を縦にする
		set diffopt+=vertical
'''


# Google Calendar
# https://github.com/itchyny/calendar.vim
[[plugins]]
repo = 'itchyny/calendar.vim'
hook_add = '''
		let g:calendar_google_calendar = 1
'''


# Deoplete 補完プラグイン
# https://github.com/Shougo/deoplete.nvim/wiki/Completion-Sources
#[[plugins]] 
#repo = 'Shougo/deoplete.nvim'
#on_i = 1
#hook_add = '''
#  let g:deoplete#enable_at_startup = 1
#  let g:deoplete#auto_complete_delay = 0
#  let g:deoplete#auto_complete_start_length = 1
#  let g:deoplete#enable_camel_case = 0
#  let g:deoplete#enable_ignore_case = 0
#  let g:deoplete#enable_refresh_always = 0
#  let g:deoplete#enable_smart_case = 1
#  let g:deoplete#file#enable_buffer_path = 1
#  let g:deoplete#max_list = 10000
#  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
#        \ neosnippet#expandable_or_jumpable() ?
#        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"



# caw comment out 
# \c でコメントのon/off
[[plugins]]
repo = 'tyru/caw.vim.git'
on_i = 1
hook_add = '''
		" 行の最初の文字の前にコメント文字をトグル
		nmap <Leader>c <Plug>(caw:hatpos:toggle)
		vmap <Leader>c <Plug>(caw:hatpos:toggle)
		" 行頭にコメントをトグル
		nmap <Leader>, <Plug>(caw:zeropos:toggle)
		vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''


# auto close 
# 自動的に{}を閉じることが出来る
[[plugins]]
repo = 'Townk/vim-autoclose'
on_i = 1



# Markup language 
# Vim Outliner of Markers -- two-pane outliner and related utilities
# :Voom markdown
# :Voom asciidoc
# :Voom python
# :Voom rest
[[plugins]]
repo = 'vim-voom/VOoM'
on_ft = ['markdown','asciidoc','python']


# Wakatime
[[plugins]]
repo = 'wakatime/vim-wakatime'


# Python 
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'


# [[plugins]]
#repo = 'google/yapf'
#on_ft = 'python'
